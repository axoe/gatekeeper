image: docker:git
services:
  - docker:dind

stages:
  - scan
  - release

before_script:
  # Setup
  - export LC_PJ=$(echo "$CI_PROJECT_NAME" | awk '{printf tolower($0)}')
  # Auth
  - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
  - export AWS_REGION=$AWS_REGION
  - export RELEASE_BUCKET=$RELEASE_BUCKET

container_scanning:
  stage: scan
  image: docker:stable
  allow_failure: true
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull axoe/${LC_PJ}:latest
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml axoe/${LC_PJ}:latest || true
  artifacts:
    paths: [gl-container-scanning-report.json]

release:
  stage: release
  image: ajwoss/avion:latest
  script:
    # Setup
    - export VERSION=$(cat app.json | jq -r '.version')
    - aws s3 rm --recursive s3://${RELEASE_BUCKET}/${LC_PJ}/${VERSION}/
    - export GOBIN=/go/bin
    - go get ./...
    # Linux
    - GOOS=linux GOARCH=amd64 go build -o ${LC_PJ}_${VERSION}_linux_amd64 main.go
    - 7z a -tzip ${LC_PJ}_${VERSION}_linux_amd64.zip ${LC_PJ}_${VERSION}_linux_amd64
    - export LINUX_SHA=$(checksum -f ${LC_PJ}_${VERSION}_linux_amd64.zip)
    - aws s3 cp ${LC_PJ}_${VERSION}_linux_amd64.zip s3://${RELEASE_BUCKET}/${LC_PJ}/${VERSION}/
    # Darwin
    - GOOS=darwin GOARCH=amd64 go build -o ${LC_PJ}_${VERSION}_darwin_amd64 main.go
    - 7z a -tzip ${LC_PJ}_${VERSION}_darwin_amd64.zip ${LC_PJ}_${VERSION}_darwin_amd64
    - export DARWIN_SHA=$(checksum -f ${LC_PJ}_${VERSION}_darwin_amd64.zip)
    - aws s3 cp ${LC_PJ}_${VERSION}_darwin_amd64.zip s3://${RELEASE_BUCKET}/${LC_PJ}/${VERSION}/
    # Windows
    - GOOS=linux GOARCH=amd64 go build -o ${LC_PJ}_${VERSION}_windows_amd64.exe main.go
    - 7z a -tzip ${LC_PJ}_${VERSION}_windows_amd64.zip ${LC_PJ}_${VERSION}_windows_amd64.exe
    - export WINDOWS_SHA=$(checksum -f ${LC_PJ}_${VERSION}_windows_amd64.zip)
    - aws s3 cp ${LC_PJ}_${VERSION}_windows_amd64.zip s3://${RELEASE_BUCKET}/${LC_PJ}/${VERSION}/
    # Publish Checksums
    - export LINUX=$(echo $LINUX_SHA ${LC_PJ}_${VERSION}_linux_amd64.zip)
    - export DARWIN=$(echo $DARWIN_SHA ${LC_PJ}_${VERSION}_darwin_amd64.zip)
    - export WINDOWS=$(echo $WINDOWS_SHA ${LC_PJ}_${VERSION}_windows_amd64.zip)
    - echo $LINUX >> ${LC_PJ}_${VERSION}_SHA256SUMS
    - echo $DARWIN >> ${LC_PJ}_${VERSION}_SHA256SUMS
    - echo $WINDOWS >> ${LC_PJ}_${VERSION}_SHA256SUMS
    - cat ${LC_PJ}_${VERSION}_SHA256SUMS
    - aws s3 cp ${LC_PJ}_${VERSION}_SHA256SUMS s3://${RELEASE_BUCKET}/${LC_PJ}/${VERSION}/
  artifacts:
    untracked: true
    paths:
    - deploy/
  tags:
    - docker

